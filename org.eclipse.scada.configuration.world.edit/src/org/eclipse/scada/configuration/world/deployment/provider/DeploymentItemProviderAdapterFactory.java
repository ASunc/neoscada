/*******************************************************************************
 * Copyright (c) 2013, 2014 IBH SYSTEMS GmbH and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBH SYSTEMS GmbH - initial API and implementation
 *******************************************************************************/
package org.eclipse.scada.configuration.world.deployment.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITableItemLabelProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.scada.configuration.world.deployment.util.DeploymentAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support
 * Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into
 * calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * 
 * @generated
 */
public class DeploymentItemProviderAdapterFactory extends
        DeploymentAdapterFactory implements ComposeableAdapterFactory,
        IChangeNotifier, IDisposable
{
    /**
     * This keeps track of the root adapter factory that delegates to this
     * adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement
     * {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier ();

    /**
     * This keeps track of all the supported types checked by
     * {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object> ();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    public DeploymentItemProviderAdapterFactory ()
    {
        this.supportedTypes.add ( IEditingDomainItemProvider.class );
        this.supportedTypes.add ( IStructuredItemContentProvider.class );
        this.supportedTypes.add ( ITreeItemContentProvider.class );
        this.supportedTypes.add ( IItemLabelProvider.class );
        this.supportedTypes.add ( IItemPropertySource.class );
        this.supportedTypes.add ( ITableItemLabelProvider.class );
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.scada.configuration.world.deployment.DebianDeploymentMechanism}
     * instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected DebianDeploymentMechanismItemProvider debianDeploymentMechanismItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.scada.configuration.world.deployment.DebianDeploymentMechanism}
     * .
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createDebianDeploymentMechanismAdapter ()
    {
        if ( this.debianDeploymentMechanismItemProvider == null )
        {
            this.debianDeploymentMechanismItemProvider = new DebianDeploymentMechanismItemProvider ( this );
        }

        return this.debianDeploymentMechanismItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.scada.configuration.world.deployment.Author}
     * instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected AuthorItemProvider authorItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.scada.configuration.world.deployment.Author}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createAuthorAdapter ()
    {
        if ( this.authorItemProvider == null )
        {
            this.authorItemProvider = new AuthorItemProvider ( this );
        }

        return this.authorItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.scada.configuration.world.deployment.RedhatDeploymentMechanism}
     * instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected RedhatDeploymentMechanismItemProvider redhatDeploymentMechanismItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.scada.configuration.world.deployment.RedhatDeploymentMechanism}
     * .
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createRedhatDeploymentMechanismAdapter ()
    {
        if ( this.redhatDeploymentMechanismItemProvider == null )
        {
            this.redhatDeploymentMechanismItemProvider = new RedhatDeploymentMechanismItemProvider ( this );
        }

        return this.redhatDeploymentMechanismItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.scada.configuration.world.deployment.DeploymentInformation}
     * instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected DeploymentInformationItemProvider deploymentInformationItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.scada.configuration.world.deployment.DeploymentInformation}
     * .
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createDeploymentInformationAdapter ()
    {
        if ( this.deploymentInformationItemProvider == null )
        {
            this.deploymentInformationItemProvider = new DeploymentInformationItemProvider ( this );
        }

        return this.deploymentInformationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.scada.configuration.world.deployment.ChangeEntry}
     * instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected ChangeEntryItemProvider changeEntryItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.scada.configuration.world.deployment.ChangeEntry}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createChangeEntryAdapter ()
    {
        if ( this.changeEntryItemProvider == null )
        {
            this.changeEntryItemProvider = new ChangeEntryItemProvider ( this );
        }

        return this.changeEntryItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.scada.configuration.world.deployment.NodeMappings}
     * instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected NodeMappingsItemProvider nodeMappingsItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.scada.configuration.world.deployment.NodeMappings}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createNodeMappingsAdapter ()
    {
        if ( this.nodeMappingsItemProvider == null )
        {
            this.nodeMappingsItemProvider = new NodeMappingsItemProvider ( this );
        }

        return this.nodeMappingsItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.scada.configuration.world.deployment.ExpressionNodeMappingEntry}
     * instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected ExpressionNodeMappingEntryItemProvider expressionNodeMappingEntryItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.scada.configuration.world.deployment.ExpressionNodeMappingEntry}
     * .
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createExpressionNodeMappingEntryAdapter ()
    {
        if ( this.expressionNodeMappingEntryItemProvider == null )
        {
            this.expressionNodeMappingEntryItemProvider = new ExpressionNodeMappingEntryItemProvider ( this );
        }

        return this.expressionNodeMappingEntryItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.scada.configuration.world.deployment.SimpleNodeMappingEntry}
     * instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected SimpleNodeMappingEntryItemProvider simpleNodeMappingEntryItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.scada.configuration.world.deployment.SimpleNodeMappingEntry}
     * .
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createSimpleNodeMappingEntryAdapter ()
    {
        if ( this.simpleNodeMappingEntryItemProvider == null )
        {
            this.simpleNodeMappingEntryItemProvider = new SimpleNodeMappingEntryItemProvider ( this );
        }

        return this.simpleNodeMappingEntryItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.scada.configuration.world.deployment.MsiDeploymentMechanism}
     * instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected MsiDeploymentMechanismItemProvider msiDeploymentMechanismItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.scada.configuration.world.deployment.MsiDeploymentMechanism}
     * .
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createMsiDeploymentMechanismAdapter ()
    {
        if ( this.msiDeploymentMechanismItemProvider == null )
        {
            this.msiDeploymentMechanismItemProvider = new MsiDeploymentMechanismItemProvider ( this );
        }

        return this.msiDeploymentMechanismItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.scada.configuration.world.deployment.P2Platform}
     * instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected P2PlatformItemProvider p2PlatformItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.scada.configuration.world.deployment.P2Platform}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createP2PlatformAdapter ()
    {
        if ( this.p2PlatformItemProvider == null )
        {
            this.p2PlatformItemProvider = new P2PlatformItemProvider ( this );
        }

        return this.p2PlatformItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public ComposeableAdapterFactory getRootAdapterFactory ()
    {
        return this.parentAdapterFactory == null ? this : this.parentAdapterFactory.getRootAdapterFactory ();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public void setParentAdapterFactory (
            final ComposedAdapterFactory parentAdapterFactory )
    {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public boolean isFactoryForType ( final Object type )
    {
        return this.supportedTypes.contains ( type ) || super.isFactoryForType ( type );
    }

    /**
     * This implementation substitutes the factory itself as the key for the
     * adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter adapt ( final Notifier notifier, final Object type )
    {
        return super.adapt ( notifier, this );
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Object adapt ( final Object object, final Object type )
    {
        if ( isFactoryForType ( type ) )
        {
            final Object adapter = super.adapt ( object, type );
            if ( ! ( type instanceof Class<?> ) || ( (Class<?>)type ).isInstance ( adapter ) )
            {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public void addListener ( final INotifyChangedListener notifyChangedListener )
    {
        this.changeNotifier.addListener ( notifyChangedListener );
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public void removeListener ( final INotifyChangedListener notifyChangedListener )
    {
        this.changeNotifier.removeListener ( notifyChangedListener );
    }

    /**
     * This delegates to {@link #changeNotifier} and to
     * {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public void fireNotifyChanged ( final Notification notification )
    {
        this.changeNotifier.fireNotifyChanged ( notification );

        if ( this.parentAdapterFactory != null )
        {
            this.parentAdapterFactory.fireNotifyChanged ( notification );
        }
    }

    /**
     * This disposes all of the item providers created by this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public void dispose ()
    {
        if ( this.debianDeploymentMechanismItemProvider != null )
        {
            this.debianDeploymentMechanismItemProvider.dispose ();
        }
        if ( this.authorItemProvider != null )
        {
            this.authorItemProvider.dispose ();
        }
        if ( this.redhatDeploymentMechanismItemProvider != null )
        {
            this.redhatDeploymentMechanismItemProvider.dispose ();
        }
        if ( this.deploymentInformationItemProvider != null )
        {
            this.deploymentInformationItemProvider.dispose ();
        }
        if ( this.changeEntryItemProvider != null )
        {
            this.changeEntryItemProvider.dispose ();
        }
        if ( this.nodeMappingsItemProvider != null )
        {
            this.nodeMappingsItemProvider.dispose ();
        }
        if ( this.expressionNodeMappingEntryItemProvider != null )
        {
            this.expressionNodeMappingEntryItemProvider.dispose ();
        }
        if ( this.simpleNodeMappingEntryItemProvider != null )
        {
            this.simpleNodeMappingEntryItemProvider.dispose ();
        }
        if ( this.msiDeploymentMechanismItemProvider != null )
        {
            this.msiDeploymentMechanismItemProvider.dispose ();
        }
        if ( this.p2PlatformItemProvider != null )
        {
            this.p2PlatformItemProvider.dispose ();
        }
    }

}
