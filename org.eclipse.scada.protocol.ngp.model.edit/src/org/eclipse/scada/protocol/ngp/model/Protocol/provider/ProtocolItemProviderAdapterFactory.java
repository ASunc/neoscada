/*******************************************************************************
 * Copyright (c) 2010, 2013 TH4 SYSTEMS GmbH and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     TH4 SYSTEMS GmbH - initial API and implementation
 *     Jens Reimann - implement security callback system
 *******************************************************************************/
package org.eclipse.scada.protocol.ngp.model.Protocol.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.scada.protocol.ngp.model.Protocol.util.ProtocolAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support
 * Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into
 * calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * 
 * @generated
 */
public class ProtocolItemProviderAdapterFactory extends ProtocolAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
    /**
     * This keeps track of the root adapter factory that delegates to this
     * adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement
     * {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier ();

    /**
     * This keeps track of all the supported types checked by
     * {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object> ();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    public ProtocolItemProviderAdapterFactory ()
    {
        this.supportedTypes.add ( IEditingDomainItemProvider.class );
        this.supportedTypes.add ( IStructuredItemContentProvider.class );
        this.supportedTypes.add ( ITreeItemContentProvider.class );
        this.supportedTypes.add ( IItemLabelProvider.class );
        this.supportedTypes.add ( IItemPropertySource.class );
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.scada.protocol.ngp.model.Protocol.Message} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected MessageItemProvider messageItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.scada.protocol.ngp.model.Protocol.Message}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createMessageAdapter ()
    {
        if ( this.messageItemProvider == null )
        {
            this.messageItemProvider = new MessageItemProvider ( this );
        }

        return this.messageItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.scada.protocol.ngp.model.Protocol.Protocol} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected ProtocolItemProvider protocolItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.scada.protocol.ngp.model.Protocol.Protocol}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createProtocolAdapter ()
    {
        if ( this.protocolItemProvider == null )
        {
            this.protocolItemProvider = new ProtocolItemProvider ( this );
        }

        return this.protocolItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.scada.protocol.ngp.model.Protocol.Structure}
     * instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected StructureItemProvider structureItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.scada.protocol.ngp.model.Protocol.Structure}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createStructureAdapter ()
    {
        if ( this.structureItemProvider == null )
        {
            this.structureItemProvider = new StructureItemProvider ( this );
        }

        return this.structureItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.scada.protocol.ngp.model.Protocol.StringAttribute}
     * instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected StringAttributeItemProvider stringAttributeItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.scada.protocol.ngp.model.Protocol.StringAttribute}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createStringAttributeAdapter ()
    {
        if ( this.stringAttributeItemProvider == null )
        {
            this.stringAttributeItemProvider = new StringAttributeItemProvider ( this );
        }

        return this.stringAttributeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.scada.protocol.ngp.model.Protocol.BooleanAttribute}
     * instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected BooleanAttributeItemProvider booleanAttributeItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.scada.protocol.ngp.model.Protocol.BooleanAttribute}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createBooleanAttributeAdapter ()
    {
        if ( this.booleanAttributeItemProvider == null )
        {
            this.booleanAttributeItemProvider = new BooleanAttributeItemProvider ( this );
        }

        return this.booleanAttributeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.scada.protocol.ngp.model.Protocol.StructureAttribute}
     * instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected StructureAttributeItemProvider structureAttributeItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.scada.protocol.ngp.model.Protocol.StructureAttribute}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createStructureAttributeAdapter ()
    {
        if ( this.structureAttributeItemProvider == null )
        {
            this.structureAttributeItemProvider = new StructureAttributeItemProvider ( this );
        }

        return this.structureAttributeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.scada.protocol.ngp.model.Protocol.VariantAttribute}
     * instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected VariantAttributeItemProvider variantAttributeItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.scada.protocol.ngp.model.Protocol.VariantAttribute}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createVariantAttributeAdapter ()
    {
        if ( this.variantAttributeItemProvider == null )
        {
            this.variantAttributeItemProvider = new VariantAttributeItemProvider ( this );
        }

        return this.variantAttributeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.scada.protocol.ngp.model.Protocol.IntegerAttribute}
     * instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected IntegerAttributeItemProvider integerAttributeItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.scada.protocol.ngp.model.Protocol.IntegerAttribute}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createIntegerAttributeAdapter ()
    {
        if ( this.integerAttributeItemProvider == null )
        {
            this.integerAttributeItemProvider = new IntegerAttributeItemProvider ( this );
        }

        return this.integerAttributeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.scada.protocol.ngp.model.Protocol.LongAttribute}
     * instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected LongAttributeItemProvider longAttributeItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.scada.protocol.ngp.model.Protocol.LongAttribute}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createLongAttributeAdapter ()
    {
        if ( this.longAttributeItemProvider == null )
        {
            this.longAttributeItemProvider = new LongAttributeItemProvider ( this );
        }

        return this.longAttributeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.scada.protocol.ngp.model.Protocol.FloatAttribute}
     * instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected FloatAttributeItemProvider floatAttributeItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.scada.protocol.ngp.model.Protocol.FloatAttribute}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createFloatAttributeAdapter ()
    {
        if ( this.floatAttributeItemProvider == null )
        {
            this.floatAttributeItemProvider = new FloatAttributeItemProvider ( this );
        }

        return this.floatAttributeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.scada.protocol.ngp.model.Protocol.VariantMapAttribute}
     * instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected VariantMapAttributeItemProvider variantMapAttributeItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.scada.protocol.ngp.model.Protocol.VariantMapAttribute}
     * .
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createVariantMapAttributeAdapter ()
    {
        if ( this.variantMapAttributeItemProvider == null )
        {
            this.variantMapAttributeItemProvider = new VariantMapAttributeItemProvider ( this );
        }

        return this.variantMapAttributeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.scada.protocol.ngp.model.Protocol.PropertiesAttribute}
     * instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected PropertiesAttributeItemProvider propertiesAttributeItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.scada.protocol.ngp.model.Protocol.PropertiesAttribute}
     * .
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createPropertiesAttributeAdapter ()
    {
        if ( this.propertiesAttributeItemProvider == null )
        {
            this.propertiesAttributeItemProvider = new PropertiesAttributeItemProvider ( this );
        }

        return this.propertiesAttributeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.scada.protocol.ngp.model.Protocol.Enum} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected EnumItemProvider enumItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.scada.protocol.ngp.model.Protocol.Enum}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createEnumAdapter ()
    {
        if ( this.enumItemProvider == null )
        {
            this.enumItemProvider = new EnumItemProvider ( this );
        }

        return this.enumItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.scada.protocol.ngp.model.Protocol.EnumAttribute}
     * instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected EnumAttributeItemProvider enumAttributeItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.scada.protocol.ngp.model.Protocol.EnumAttribute}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createEnumAttributeAdapter ()
    {
        if ( this.enumAttributeItemProvider == null )
        {
            this.enumAttributeItemProvider = new EnumAttributeItemProvider ( this );
        }

        return this.enumAttributeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.scada.protocol.ngp.model.Protocol.Interface}
     * instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected InterfaceItemProvider interfaceItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.scada.protocol.ngp.model.Protocol.Interface}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createInterfaceAdapter ()
    {
        if ( this.interfaceItemProvider == null )
        {
            this.interfaceItemProvider = new InterfaceItemProvider ( this );
        }

        return this.interfaceItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public ComposeableAdapterFactory getRootAdapterFactory ()
    {
        return this.parentAdapterFactory == null ? this : this.parentAdapterFactory.getRootAdapterFactory ();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public void setParentAdapterFactory ( final ComposedAdapterFactory parentAdapterFactory )
    {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public boolean isFactoryForType ( final Object type )
    {
        return this.supportedTypes.contains ( type ) || super.isFactoryForType ( type );
    }

    /**
     * This implementation substitutes the factory itself as the key for the
     * adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter adapt ( final Notifier notifier, final Object type )
    {
        return super.adapt ( notifier, this );
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Object adapt ( final Object object, final Object type )
    {
        if ( isFactoryForType ( type ) )
        {
            final Object adapter = super.adapt ( object, type );
            if ( ! ( type instanceof Class<?> ) || ( (Class<?>)type ).isInstance ( adapter ) )
            {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public void addListener ( final INotifyChangedListener notifyChangedListener )
    {
        this.changeNotifier.addListener ( notifyChangedListener );
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public void removeListener ( final INotifyChangedListener notifyChangedListener )
    {
        this.changeNotifier.removeListener ( notifyChangedListener );
    }

    /**
     * This delegates to {@link #changeNotifier} and to
     * {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public void fireNotifyChanged ( final Notification notification )
    {
        this.changeNotifier.fireNotifyChanged ( notification );

        if ( this.parentAdapterFactory != null )
        {
            this.parentAdapterFactory.fireNotifyChanged ( notification );
        }
    }

    /**
     * This disposes all of the item providers created by this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public void dispose ()
    {
        if ( this.messageItemProvider != null )
        {
            this.messageItemProvider.dispose ();
        }
        if ( this.protocolItemProvider != null )
        {
            this.protocolItemProvider.dispose ();
        }
        if ( this.structureItemProvider != null )
        {
            this.structureItemProvider.dispose ();
        }
        if ( this.stringAttributeItemProvider != null )
        {
            this.stringAttributeItemProvider.dispose ();
        }
        if ( this.booleanAttributeItemProvider != null )
        {
            this.booleanAttributeItemProvider.dispose ();
        }
        if ( this.structureAttributeItemProvider != null )
        {
            this.structureAttributeItemProvider.dispose ();
        }
        if ( this.variantAttributeItemProvider != null )
        {
            this.variantAttributeItemProvider.dispose ();
        }
        if ( this.integerAttributeItemProvider != null )
        {
            this.integerAttributeItemProvider.dispose ();
        }
        if ( this.longAttributeItemProvider != null )
        {
            this.longAttributeItemProvider.dispose ();
        }
        if ( this.floatAttributeItemProvider != null )
        {
            this.floatAttributeItemProvider.dispose ();
        }
        if ( this.variantMapAttributeItemProvider != null )
        {
            this.variantMapAttributeItemProvider.dispose ();
        }
        if ( this.propertiesAttributeItemProvider != null )
        {
            this.propertiesAttributeItemProvider.dispose ();
        }
        if ( this.enumItemProvider != null )
        {
            this.enumItemProvider.dispose ();
        }
        if ( this.enumAttributeItemProvider != null )
        {
            this.enumAttributeItemProvider.dispose ();
        }
        if ( this.interfaceItemProvider != null )
        {
            this.interfaceItemProvider.dispose ();
        }
    }

}
